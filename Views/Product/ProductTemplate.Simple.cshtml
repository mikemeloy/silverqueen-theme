@model ProductDetailsModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Seo
@using Nop.Services.Html

@inject IHtmlFormatter htmlFormatter
@inject IWebHelper webHelper
@inject SeoSettings seoSettings

@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    NopHtml.AddMetaDescriptionParts(Model.MetaDescription);
    NopHtml.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    NopHtml.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl<Product>(new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        NopHtml.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }
}
<!--product breadcrumb-->
<div class="breadcrumb-wrapper">
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
</div>
@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="page product-details-page">
    <div class="page-body">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            @if (seoSettings.MicrodataEnabled)
            {
                @await Html.PartialAsync("_Microdata", Model)
            }
            <div data-productid="@Model.Id">
                <div class="product-essential">
                    <div class="row">
                        <div class="col-md-5">
                            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                            <div class="gallery">
                                <!--product pictures-->
                                @await Html.PartialAsync("_ProductDetailsPictures", Model)
                                <!--product videos-->
                                @await Html.PartialAsync("_ProductDetailsVideos", Model)
                            </div>
                        </div>
                        <div class="col-md-7">
                            @await Html.PartialAsync("_Discontinued", Model)
                            <div class="overview">
                                <div class="product-name panel-heading">
                                    <h1>
                                        @Model.Name
                                    </h1>
                                </div>
                                <!--short description-->
                                @if (!string.IsNullOrEmpty(Model.ShortDescription))
                                {
                                <div class="short-description">
                                    @Html.Raw(Model.ShortDescription)
                                </div>
                                }
                                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                                <!--product reviews-->
                                @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                                <!--product manufacturers-->
                                @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                                <!--product attributes-->
                                @{
                                    var dataDictAttributes = new ViewDataDictionary(ViewData);
                                    dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                                    @await Html.PartialAsync("_ProductAttributes", Model, dataDictAttributes)
                                }
                                <!--SKU, MAN, GTIN, vendor-->
                                @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)
                                <!--delivery-->
                                @await Html.PartialAsync("_DeliveryInfo", Model)
                                <!--sample download-->
                                @await Html.PartialAsync("_DownloadSample", Model)
                                <!--rental info-->
                                @{
                                    var dataDictRental = new ViewDataDictionary(ViewData);
                                    dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                                    @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                                }
                                <!--product price-->
                                @{
                                    var dataDictPrice = new ViewDataDictionary(ViewData);
                                    dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductPriceTop, additionalData = Model })
                                    @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)
                                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductPriceBottom, additionalData = Model })
                                }
                                <!--availability-->
                                @await Html.PartialAsync("_Availability", Model)
                                <!--gift card-->
                                @{
                                    var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                    dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                                    @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                                }
                                <!--addtocart & estimate shipping -->
                                @{
                                    var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                    dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                    @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                                    @await Html.PartialAsync("_ProductEstimateShipping", Model.ProductEstimateShipping)
                                }
                                <div class="overview-buttons">
                                    <!--wishlist, compare, email a friend-->
                                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                                    @{
                                        var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                        dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                        @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                    }
                                    @await Html.PartialAsync("_CompareProductsButton", Model)
                                    @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                                </div>
                                @await Html.PartialAsync("_ShareButton", Model)
                                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                                <p class="support-line">Need help? <a href="tel:8002623134"><em class="fal fa-phone fa-fw"></em> 800-262-3134</a> <a href="mailto:service@thesilverqueen.com" title="Email support"><i class="fal fa-envelope"></i> Email</a></p>
                            </div>
                        </div>
                        <div class="col-md-12 product-details">
                            @if (!string.IsNullOrEmpty(Model.FullDescription))
                            {
                            <h2>@T("account.vendorinfo.description")</h2>
                            <div class="full-description" id="description">
                                @Html.Raw(Model.FullDescription)
                            </div>
                            }
                            @if (!string.IsNullOrEmpty(@Html.PartialAsync("_ProductSpecifications", Model).ToString()))
                            {
                            @* <p>@T("Products.Specs"):</p> *@
                            <div class="product-specification" id="specification">
                                @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel)
                            </div>
                            }
                            @* @if (Model.ProductTags.Count > 0)
                            {
                            <h3>@T("Products.Tags")</h3>
                            <div class="product-tags" id="tags">
                                    @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                                </div>
                            } *@
                            @if (Model.TierPrices.Count > 0)
                            {
                            <h3>@T("admin.catalog.products.tierprices")</h3>
                            <div class="product-tierprices" id="tierprices">
                                @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                            </div>
                            }
                            <hr >
                            <div class="product-details-accordion accordion accordion-simple" id="accordion" role="tablist" aria-multiselectable="true">
                                <div class="accordion-item">
                                    <div class="accordion-heading" role="tab" id="headingOne">
                                        <p class="accordion-title">
                                            <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                            <span class="collapse-icon out">+</span><span class="collapse-icon in">-</span> Shipping & Returns
                                            </a>
                                        </p>
                                    </div>
                                    <div id="collapseOne" class="accordion-collapse collapse" role="tabaccordion" aria-labelledby="headingOne">
                                        <div class="accordion-body">
                                            @await Component.InvokeAsync(typeof(TopicBlockViewComponent), new { systemName = "ProductDetailsShippingAndReturns" })
                                        </div>
                                    </div>
                                </div>
                                <div class="accordion-item">
                                    <div class="accordion-heading" role="tab" id="headingTwo">
                                        <p class="accordion-title">
                                            <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                            <span class="collapse-icon out">+</span><span class="collapse-icon in">-</span> International Orders
                                            </a>
                                        </p>
                                    </div>
                                    <div id="collapseTwo" class="accordion-collapse collapse" role="tabaccordion" aria-labelledby="headingTwo">
                                        <div class="accordion-body">
                                            @await Component.InvokeAsync(typeof(TopicBlockViewComponent), new { systemName = "ProductDetailsInternationalOrders" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                        </div>
                    </div>
                </div>
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                <div class="product-collateral">
                    <div class="row">
                        @await Component.InvokeAsync(typeof(ProductsAlsoPurchasedViewComponent), new { productId = Model.Id })
                        @await Component.InvokeAsync(typeof(RelatedProductsViewComponent), new { productId = Model.Id })
                    </div>
                </div>
            </div>
        </form>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
        <div class="our-core">
            <div class="our-core-inner-wrap">
                @await Component.InvokeAsync(typeof(TopicBlockViewComponent), new { systemName = "ProductDetailsOurCore" })
            </div>
        </div>
    </div>
</div>