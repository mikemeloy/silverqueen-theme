@model FoxNetSoft.Plugin.Misc.SimpleCheckout.Models.SimpleCheckoutModel
@using System.Globalization
@using System.Text
@using Nop.Core
@using Nop.Web.Framework.UI
@using Nop.Web.Framework
@using FoxNetSoft.Plugin.Misc.SimpleCheckout.Models
@using FoxNetSoft.Plugin.Misc.SimpleCheckout.Extensions
@using FoxNetSoft.Plugin.Misc.SimpleCheckout.Helpers
<input asp-for="SecondaryAddress.Id" type="hidden" />

<div class="secondary-address-description" @(!Model.UseSecondaryAddress ? Html.Raw("style='display: none;' ") : null)>
    <div data-shipping-address><h3>Shipping Address</h3><i class="fal fa-times"></i></div>
    <div data-address-list>
        <fieldset data-billing="true" data-addressid data-secondary style="display:flex;flex-direction:column">
            <div data-address>@Model.SecondaryAddress.Address1</div>
            <div data-city>@Model.SecondaryAddress.City</div>
            <div data-zip>@Model.SecondaryAddress.ZipPostalCode</div>
            <i onclick="editSecondaryAddress()">Edit</i>
            <a href="javascript:void(0)" class="fal fa-check"></a>
        </fieldset>
    </div>
</div>

<div id="secondary-address-popwindow" title="@Model.Locales["PoupWindow.Title"]" style="display:none;">
    <div id="simple-checkout-secondary-address-block" class="simple-checkout-secondary-address-block">       
        <div class="simple-checkout-secondary-address-table">
            @if (Model.PluginSettings.AllowToSelectTheAddress && Model.ExistingSecondaryAddresses.Count() > 1)
            {
                <div class="inputs">
                    <nop-label asp-for="ExistingSecondaryAddresses" class="labelforinputs" />
                    <select name="existingsecondaryaddresses" id="existingsecondaryaddresses" onchange="changeSecondaryAddress(this.value)" autocomplete="off">
                        @foreach (var address in Model.ExistingSecondaryAddresses)
                        {
                            <option value="@(address.Id)">@(address.ConvertToString())</option>
                        }
                    </select>
                </div>
            }
            <div class="inputs">
                <nop-label asp-for="SecondaryAddress.FirstName" class="labelforinputs" />
                <input asp-for="SecondaryAddress.FirstName" autocomplete="off" />
                <nop-required />
                <span asp-validation-for="SecondaryAddress.FirstName"></span>
            </div>
            <div class="inputs">
                <nop-label asp-for="SecondaryAddress.LastName" class="labelforinputs" />
                <input asp-for="SecondaryAddress.LastName" autocomplete="off" />
                <nop-required />
                <span asp-validation-for="SecondaryAddress.LastName"></span>
            </div>
            <div class="inputs">
                <nop-label asp-for="SecondaryAddress.Email" class="labelforinputs" />
                <input asp-for="SecondaryAddress.Email" autocomplete="off" />
                <nop-required />
                <span asp-validation-for="SecondaryAddress.Email"></span>
            </div>
            @if (Model.SecondaryAddress.CompanyEnabled)
            {
                <div class="inputs">
                    <nop-label asp-for="SecondaryAddress.Company" class="labelforinputs" />
                    <input asp-for="SecondaryAddress.Company" autocomplete="off" />
                    @if (Model.SecondaryAddress.CompanyRequired)
                    {
                        <nop-required />
                    }
                    <span asp-validation-for="SecondaryAddress.Company"></span>
                </div>
            }
            @if (Model.SecondaryAddress.StreetAddressEnabled)
            {
                <div id="record-address-streetaddress" class="inputs">
                    <nop-label asp-for="SecondaryAddress.Address1" class="labelforinputs" />
                    <input asp-for="SecondaryAddress.Address1" autocomplete="off" />
                    @if (Model.SecondaryAddress.StreetAddressRequired)
                    {
                        <nop-required />
                    }
                    <span asp-validation-for="SecondaryAddress.Address1"></span>
                </div>
            }
            @if (Model.SecondaryAddress.StreetAddress2Enabled)
            {
                <div id="record-address-streetaddress2" class="inputs">
                    <nop-label asp-for="SecondaryAddress.Address2" class="labelforinputs" />
                    <input asp-for="SecondaryAddress.Address2" autocomplete="off" />
                    @if (Model.SecondaryAddress.StreetAddress2Required)
                    {
                        <nop-required />
                    }
                    <span asp-validation-for="SecondaryAddress.Address2"></span>
                </div>
            }
            @if (Model.SecondaryAddress.CityEnabled)
            {
                <div id="record-address-city" class="inputs">
                    <nop-label asp-for="SecondaryAddress.City" class="labelforinputs" />
                    <input asp-for="SecondaryAddress.City" autocomplete="off" />
                    @if (Model.SecondaryAddress.CityRequired)
                    {
                        <nop-required />
                    }
                    <span asp-validation-for="SecondaryAddress.City"></span>
                </div>
            }
            @if (Model.SecondaryAddress.CountyEnabled)
            {
                <div id="record-address-county" class="inputs">
                    <nop-label asp-for="SecondaryAddress.County" class="labelforinputs" />
                    <input asp-for="SecondaryAddress.County" autocomplete="off" />
                    @if (Model.SecondaryAddress.CountyRequired)
                    {
                        <nop-required />
                    }
                    <span asp-validation-for="SecondaryAddress.County"></span>
                </div>
            }
            @if (Model.SecondaryAddress.CountryEnabled && Model.SecondaryAddress.StateProvinceEnabled)
            {
                <div id="record-address-stateprovince" class="inputs">
                    <nop-label asp-for="SecondaryAddress.StateProvinceId" class="labelforinputs" />
                    <select asp-for="SecondaryAddress.StateProvinceId" asp-items="Model.SecondaryAddress.AvailableStates" autocomplete="off"></select>
                    <nop-required />
                    <span id="secondary-address-states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait")</span>
                    <span asp-validation-for="SecondaryAddress.AvailableStates"></span>
                </div>
            }
            @if (Model.SecondaryAddress.ZipPostalCodeEnabled)
            {
                <div id="record-address-zippostalcode" class="inputs">
                    <nop-label asp-for="SecondaryAddress.ZipPostalCode" class="labelforinputs" />
                    <input asp-for="SecondaryAddress.ZipPostalCode" autocomplete="off" />
                    @if (Model.SecondaryAddress.ZipPostalCodeRequired)
                    {
                        <nop-required />
                    }
                    <span asp-validation-for="SecondaryAddress.ZipPostalCode"></span>
                </div>
            }
            @if (Model.SecondaryAddress.CountryEnabled)
            {
                <div id="record-address-country" class="inputs">
                    <nop-label asp-for="SecondaryAddress.CountryId" class="labelforinputs" />
                    <select asp-for="SecondaryAddress.CountryId" asp-items="Model.SecondaryAddress.AvailableCountries" autocomplete="off"></select>
                    <nop-required />
                    <span asp-validation-for="SecondaryAddress.CountryId"></span>
                </div>
            }
            @if (Model.SecondaryAddress.PhoneEnabled)
            {
                <div class="inputs">
                    <nop-label asp-for="SecondaryAddress.PhoneNumber" class="labelforinputs" />
                    <input asp-for="SecondaryAddress.PhoneNumber" autocomplete="off" />
                    @if (Model.SecondaryAddress.PhoneRequired)
                    {
                        <nop-required />
                    }
                    <span asp-validation-for="SecondaryAddress.PhoneNumber"></span>
                </div>
            }
            @if (Model.SecondaryAddress.FaxEnabled)
            {
                <div class="inputs">
                    <nop-label asp-for="SecondaryAddress.FaxNumber" class="labelforinputs" />
                    <input asp-for="SecondaryAddress.FaxNumber" autocomplete="off" />
                    @if (Model.SecondaryAddress.FaxRequired)
                    {
                        <nop-required />
                    }
                    <span asp-validation-for="SecondaryAddress.FaxNumber"></span>
                </div>
            }
            @if (Model.SecondaryAddress.CustomAddressAttributes.Any())
            {
                @await Html.PartialAsync(await ResolveViewPathHelper.GetThemesPathAsync("SimpleCheckout/_SecondaryAddressAttributes"), Model.SecondaryAddress.CustomAddressAttributes)
            }
        </div>
        <div class="secondary-address-window-buttons-bottom">
            <input class="button-2 secondary-address-window-button" type="button" onclick="saveSecondaryAddress()" value="@T("FoxNetSoft.Plugin.Misc.SimpleCheckout.PoupWindow.Save")">
            <input class="button-2 secondary-address-window-button" type="button" onclick="cancelSecondaryAddress()" value="@T("FoxNetSoft.Plugin.Misc.SimpleCheckout.PoupWindow.Cancel")">
        </div>
    </div>
</div>
