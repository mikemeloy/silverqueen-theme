@model FoxNetSoft.Plugin.Misc.SimpleCheckout.Models.SimpleCheckoutModel
@using FoxNetSoft.Plugin.Misc.SimpleCheckout.Extensions
@using FoxNetSoft.Plugin.Misc.SimpleCheckout.Helpers
@using Nop.Core
@inject IWorkContext _workContext

@{
    var currentCustomer = await _workContext.GetCurrentCustomerAsync();
    var impersonatedUser = _workContext.OriginalCustomerIfImpersonated;
    var impersonated = impersonatedUser is null;
    if (string.IsNullOrWhiteSpace(Model.PrimaryAddress.FirstName)
&& string.IsNullOrWhiteSpace(Model.PrimaryAddress.LastName)
&& string.IsNullOrWhiteSpace(Model.PrimaryAddress.Email))
    {
        Model.PrimaryAddress.FirstName = currentCustomer.FirstName;
        Model.PrimaryAddress.LastName = currentCustomer.LastName;
        Model.PrimaryAddress.Email = currentCustomer.Email;
    }

    if (string.IsNullOrWhiteSpace(Model.SecondaryAddress.FirstName)
    && string.IsNullOrWhiteSpace(Model.SecondaryAddress.LastName)
    && string.IsNullOrWhiteSpace(Model.SecondaryAddress.Email))
    {
        Model.SecondaryAddress.FirstName = currentCustomer.FirstName;
        Model.SecondaryAddress.LastName = currentCustomer.LastName;
        Model.SecondaryAddress.Email = currentCustomer.Email;
    }
}

@{
    NopHtml.AppendCssFileParts("~/Themes/SilverQueen-2023/Content/css/licenseparser.css", "", true);
    NopHtml.AppendCssFileParts("~/Themes/SilverQueen-2023/Content/css/address.modal.css", "", true);
    NopHtml.AppendScriptParts(ResourceLocation.Footer, $"~/Themes/SilverQueen-2023/Content/js/address.modal.js", excludeFromBundle: true);
}

@if (!impersonated)
{
    <script type="module" asp-location="Footer">
        import scanner from '/Themes/SilverQueen-2023/Content/js/addressScannerInit.js';

        new scanner();
    </script>
}

<input asp-for="PrimaryAddress.Id" type="hidden" />
<div class="inputs">
    <h3 class="primary-address-title">
        @if (Model.PluginSettings.UseBillingAddressAsPrimary)
        {
            @T("FoxNetSoft.Plugin.Misc.SimpleCheckout.MainWindow.Title.BillingAddress")
        }
        else
        {
            @T("FoxNetSoft.Plugin.Misc.SimpleCheckout.MainWindow.Title.ShippingAddress")
        }
    </h3>
</div>
@if (!impersonated)
{ 
    <dialog id="scannerDialog" class="scanner-dialog">
        <button type="button" class="close-button scannerDialogClose">×</button>
        <div id="scanStatus" class="scan-status">
            Waiting for scan...
        </div>

        <div class="spinner hidden-spinner"></div>

        <textarea type="text"
                  id="scannerInput"
                  class="scanner-input"
                  autofocus
                  placeholder="Scan license or click here to focus input"></textarea>
    </dialog>
}

<div style="display: flex; flex-direction: row; flex-wrap: wrap;">
    @foreach (var address in Model.ExistingPrimaryAddresses)
    {
        <fieldset data-shipping data-addressid="@address.Id" onclick="onUserSelectNewAddress(`@address.Id`)">
            <div data-street>@address.Address1</div>
            <div data-city>@address.City</div>
            <div data-zip>@address.ZipPostalCode</div>
            <i onclick="onUserAddNewOrEditAddress_Click(`${@address.Id}`)">Edit</i>
        </fieldset>
    }

    @if(Model.ExistingPrimaryAddresses.Count() == 0) {
        <fieldset data-addressid data-open-new style="display:grid;align-content:center">
            <div style="text-align:center">New Address</div>
        </fieldset>
    }

    @if (Model.PluginSettings.AllowSecondaryAddress)
    {
        <fieldset data-open-other style="margin-bottom:2rem;text-align:center">
           Select An Alternative Shipping Address
        </fieldset>
    }
</div>

<dialog data-new-address>
    <header>
        <span></span>
        <span>@T("FoxNetSoft.Plugin.Misc.SimpleCheckout.MainWindow.Title.BillingAddress")</span>
        <aside id="scannerDialogOpen">
            <i class="fal fa-barcode" aria-hidden="true"></i>
            <cite>Scan license</cite>
        </aside>
    </header>
    <main>
      
    <div class="inputs" hidden>
        <nop-label asp-for="ExistingPrimaryAddresses" class="labelforinputs" />
        <select name="existingprimaryaddresses" id="existingprimaryaddresses"
                onchange="changePrimaryAddress(this.value)" autocomplete="off">
            @foreach (var address in Model.ExistingPrimaryAddresses)
            {
                <option value="@(address.Id)">@(address.ConvertToString())</option>
            }
        </select>
    </div>
        

        <div class="inputs">
            <nop-label asp-for="PrimaryAddress.FirstName" class="labelforinputs" />
            <input asp-for="PrimaryAddress.FirstName" autocomplete="off" />
            <nop-required />
            <span asp-validation-for="PrimaryAddress.FirstName"></span>
        </div>
        <div class="inputs">
            <nop-label asp-for="PrimaryAddress.LastName" class="labelforinputs" />
            <input asp-for="PrimaryAddress.LastName" autocomplete="off" />
            <nop-required />
            <span asp-validation-for="PrimaryAddress.LastName"></span>
        </div>
        <div class="inputs">
            <nop-label asp-for="PrimaryAddress.Email" class="labelforinputs" />
            <input asp-for="PrimaryAddress.Email" autocomplete="off" />
            <nop-required />
            <span asp-validation-for="PrimaryAddress.Email"></span>
        </div>
        @if (Model.PrimaryAddress.CompanyEnabled)
        {
            <div class="inputs">
                <nop-label asp-for="PrimaryAddress.Company" class="labelforinputs" />
                <input asp-for="PrimaryAddress.Company" autocomplete="off" />
                @if (Model.PrimaryAddress.CompanyRequired)
                {
                    <nop-required />
                }
                <span asp-validation-for="PrimaryAddress.Company"></span>
            </div>
        }
        @if (Model.DisplayVatNumber)
        {
            <div class="inputs">
                <nop-label asp-for="VatNumber" class="labelforinputs" />
                <input asp-for="VatNumber" autocomplete="off" />
            </div>
        }
        @if (Model.PrimaryAddress.StreetAddressEnabled)
        {
            <div id="record-address-streetaddress" class="inputs">
                <nop-label asp-for="PrimaryAddress.Address1" class="labelforinputs" />
                <input asp-for="PrimaryAddress.Address1" autocomplete="off" />
                @if (Model.PrimaryAddress.StreetAddressRequired)
                {
                    <nop-required />
                }
                <span asp-validation-for="PrimaryAddress.Address1"></span>
            </div>
        }
        @if (Model.PrimaryAddress.StreetAddress2Enabled)
        {
            <div id="record-address-streetaddress2" class="inputs">
                <nop-label asp-for="PrimaryAddress.Address2" class="labelforinputs" />
                <input asp-for="PrimaryAddress.Address2" autocomplete="off" />
                @if (Model.PrimaryAddress.StreetAddress2Required)
                {
                    <nop-required />
                }
                <span asp-validation-for="PrimaryAddress.Address2"></span>
            </div>
        }
        @if (Model.PrimaryAddress.CityEnabled)
        {
            <div id="record-address-city" class="inputs">
                <nop-label asp-for="PrimaryAddress.City" class="labelforinputs" />
                <input asp-for="PrimaryAddress.City" autocomplete="off" />
                @if (Model.PrimaryAddress.CityRequired)
                {
                    <nop-required />
                }
                <span asp-validation-for="PrimaryAddress.City"></span>
            </div>
        }
        @if (Model.PrimaryAddress.CountyEnabled)
        {
            <div id="record-address-county" class="inputs">
                <nop-label asp-for="PrimaryAddress.County" class="labelforinputs" />
                <input asp-for="PrimaryAddress.County" autocomplete="off" />
                @if (Model.PrimaryAddress.CountyRequired)
                {
                    <nop-required />
                }
                <span asp-validation-for="PrimaryAddress.County"></span>
            </div>
        }
        @if (Model.PrimaryAddress.CountryEnabled)
        {
            <div id="record-address-country" class="inputs">
                <nop-label asp-for="PrimaryAddress.CountryId" class="labelforinputs" />
                <select asp-for="PrimaryAddress.CountryId" asp-items="Model.PrimaryAddress.AvailableCountries"
                        autocomplete="off"></select>
                <nop-required />
                <span asp-validation-for="PrimaryAddress.CountryId"></span>
            </div>
        }
        @if (Model.PrimaryAddress.CountryEnabled && Model.PrimaryAddress.StateProvinceEnabled)
        {
            <div id="record-address-stateprovince" class="inputs">
                <nop-label asp-for="PrimaryAddress.StateProvinceId" class="labelforinputs" />
                <select asp-for="PrimaryAddress.StateProvinceId" asp-items="Model.PrimaryAddress.AvailableStates"
                        autocomplete="off"></select>
                <nop-required />
                <span id="primary-address-states-loading-progress" style="display: none;"
                      class="please-wait">@T("Common.Wait")</span>
                    <span asp-validation-for="PrimaryAddress.AvailableStates"></span>
                </div>
            }
        @if (Model.PrimaryAddress.ZipPostalCodeEnabled)
        {
            <div id="record-address-zippostalcode" class="inputs">
                <nop-label asp-for="PrimaryAddress.ZipPostalCode" class="labelforinputs" />
                <input asp-for="PrimaryAddress.ZipPostalCode" autocomplete="off" />
                @if (Model.PrimaryAddress.ZipPostalCodeRequired)
                {
                    <nop-required />
                }
                <span asp-validation-for="PrimaryAddress.ZipPostalCode"></span>
            </div>
        }
        @if (Model.PrimaryAddress.PhoneEnabled)
        {
            <div class="inputs">
                <nop-label asp-for="PrimaryAddress.PhoneNumber" class="labelforinputs" />
                <input asp-for="PrimaryAddress.PhoneNumber" autocomplete="off" />
                @if (Model.PrimaryAddress.PhoneRequired)
                {
                    <nop-required />
                }
                <span asp-validation-for="PrimaryAddress.PhoneNumber"></span>
            </div>
        }
        @if (Model.PrimaryAddress.FaxEnabled)
        {
            <div class="inputs">
                <nop-label asp-for="PrimaryAddress.FaxNumber" class="labelforinputs" />
                <input asp-for="PrimaryAddress.FaxNumber" autocomplete="off" />
                @if (Model.PrimaryAddress.FaxRequired)
                {
                    <nop-required />
                }
                <span asp-validation-for="PrimaryAddress.FaxNumber"></span>
            </div>
        }
        @*@if (Model.PrimaryAddress.CustomAddressAttributes.Any())
            {
                @awaitHtml.PartialAsync(await ResolveViewPathHelper.GetThemesPathAsync("SimpleCheckout/_PrimaryAddressAttributes"), Model.PrimaryAddress.CustomAddressAttributes);
            }*@
        <footer>
            <input data-billing-address-submit type="button" value="Save">
            <input type="button" onclick="closeAddressModal()" value="Cancel">
        </footer>
    </main>
</dialog>
@if (Model.PluginSettings.AllowSecondaryAddress)
{
    <div class="inputs secondary-address" hidden>
        @{
            var useSecondaryAddressText = "FoxNetSoft.Plugin.Misc.SimpleCheckout.UseSecondaryAddressForBilling";
            if (@Model.PluginSettings.UseBillingAddressAsPrimary)
            {
                useSecondaryAddressText = "FoxNetSoft.Plugin.Misc.SimpleCheckout.UseSecondaryAddressForShipping";
            }
            else
            {
                useSecondaryAddressText = "FoxNetSoft.Plugin.Misc.SimpleCheckout.UseSecondaryAddressForBilling";
            }
        }
        <div class="labelforinputs">
            <label class="control-label" for="UseSecondaryAddress">
                @T(useSecondaryAddressText)
            </label>
            <div title="@T(useSecondaryAddressText+" .Hint")" class="ico-help">
                <i class="fa fa-question-circle"></i>
            </div>
        </div>
        <input asp-for="UseSecondaryAddress" autocomplete="off" />

    </div>
}

<div class="record-usesecondary-address">
    @await Html.PartialAsync(await ResolveViewPathHelper.GetThemesPathAsync("SimpleCheckout/_SecondaryAddress"), Model)
</div>
