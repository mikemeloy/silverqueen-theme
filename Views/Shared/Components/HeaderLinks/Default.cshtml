@model HeaderLinksModel
@using Nop.Core.Domain.Customers
@inject Nop.Core.IWebHelper webHelper
<div class="header-links">
	<ul class="list-inline">
		@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksBefore, additionalData = Model })
		@await Component.InvokeAsync("AdminHeaderLinks")

		@if (Model.IsAuthenticated)
		{
			<li class="logout">
				<a href="@Url.RouteUrl("Logout")">
					<span class="register-icon">
						<i class="fal fa-sign-out"></i> 
					</span>

					<span class="login-label">@T("Account.Logout")</span>
				</a>
			</li>

			<li class="my-account"><a href="@Url.RouteUrl("CustomerInfo")"><span class="account-icon"><i class="fal fa-user"></i></span> <span class="account-label">@T("Account.MyAccount")</span></a></li>
		}
		else
		{
			var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
				? url.ToString()
				: webHelper.GetRawUrl(Context.Request);

			<li class="login">
				<a href="@Url.RouteUrl("Login", new { returnUrl })">
					<span class="register-icon">
						<i class="fal fa-sign-in"></i> 
					</span>
					<span class="login-label">@T("Account.Login")</span>
				</a>
			</li>

			@* @if (Model.RegistrationType != UserRegistrationType.Disabled)
			{
				<li class="register">
					<a href="@Url.RouteUrl("Register", new { returnUrl })">
						<span class="register-icon">
							<i class="fal fa-user-plus"></i> 
						</span>
						<span class="register-label">@T("Account.Register")</span>
					</a>
				</li>
			} *@
		}

		@if (Model.WishlistEnabled)
		{
			<li class="my-wishlist">
				<a href="@Url.RouteUrl("Wishlist")">
					<span class="wishlist-icon">
						<i class="fal fa-heart">
							<span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
						</i>
					</span>
					<span class="wishlist-label">@T("Wishlist")</span>
				</a>
			</li>
		}
		@await Component.InvokeAsync(typeof(FlyoutShoppingCartViewComponent))
		@* @if (Model.AllowPrivateMessages)
		{
			<li>
				<a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
					<span class="inbox-label">@T("PrivateMessages.Inbox")</span>
					<span class="inbox-unread">@Model.UnreadPrivateMessages</span>
				</a>
			</li>
		} *@
		@* @if (Model.IsAuthenticated)
		{
			<li class="logout"><a href="@Url.RouteUrl("Logout")" class="ico-logout"><span>@T("Account.Logout")</span></a></li>
		}
		else
		{
			var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
				? url.ToString()
				: webHelper.GetRawUrl(Context.Request);

			<li class="login"><a href="@Url.RouteUrl("Login", new { returnUrl })" class="ico-login"><span>@T("Account.Login")</span></a></li>
		} *@
		@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksAfter, additionalData = Model })
	</ul>
	@if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
	{
		//new private message notification
		<script asp-location="Footer">
			$(document).ready(function () {
				displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
			});
		</script>
	}
</div>